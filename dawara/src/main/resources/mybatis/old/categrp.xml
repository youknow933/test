<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="categrp">
<!-- namespace: 테이블명 -->
<!-- categrp: Mybatis를 구분하는 구분값 -->

  <!-- 
    <insert>: INSERT SQL 실행
    id: Spring에서 호출 시 구분값으로 사용 (id = DAO의 메소드명)
    parameterType: MyBatis가 받는 전달받는 데이터 객체
    return: 등록한 레코드 갯수를 return
    SQL문의 ';'는 반드시 삭제한다.
    #{} 하나 = ? 하나
    #{name} : public String getName(){...
   -->
  <insert id="create" parameterType="CategrpVO">
    INSERT INTO categrp(categrpno, classification, name, seqno, visible, rdate) 
    VALUES((SELECT nvl(MAX(categrpno), 0) + 1 as categrpno FROM categrp),
            #{classification}, #{name}, #{seqno}, #{visible}, SYSDATE)
  </insert>
  
  <!--
   // List: interface / ArrayList: class
   레코드 갯수만큼 CategrpVO 객체를 만들어 ArrayList에 저장, 그리고 list 리턴.
   List<CategrpVO> list = new ArrayList<CategrpVO>(); // 내부적으로는 ArrayList이다
   -->
  <!-- resultType: 리턴타입? -->
  <select id="list" resultType="CategrpVO">
    SELECT categrpno, classification, name, seqno, visible, rdate
    FROM categrp
    ORDER BY seqno ASC, categrpno ASC
  </select>
  
  <!-- parameterType="int": WHERE의 #{categrpno}의 타입 -->
  <!-- 한 건의 레코드 조회 -->
  <select id="read" resultType="CategrpVO" parameterType="int">
    SELECT categrpno, classification, name, seqno, visible, rdate
    FROM categrp
    WHERE categrpno = #{categrpno}
  </select>
  
  <!-- 변경된 레코드 갯수 리턴 -->
  <update id="update" parameterType="categrpVO">
    UPDATE categrp
    SET classification = #{classification}, name = #{name}, seqno = #{seqno}, visible = #{visible}
    WHERE categrpno = #{categrpno}
  </update>
  
  <!-- 삭제 -->
  <delete id="delete" parameterType="int">
    DELETE FROM categrp 
    WHERE categrpno = #{categrpno}
  </delete>
  
  <!-- 우선순위 up 10 -> 1 -->
  <update id="update_seqno_up" parameterType="int">
    UPDATE categrp 
    SET seqno = seqno - 1 
    WHERE categrpno = #{categrpno}
  </update>
  
  <!-- 우선순위 down 1 -> 10 -->
  <update id="update_seqno_down" parameterType="int">
    UPDATE categrp 
    SET seqno = seqno + 1 
    WHERE categrpno = #{categrpno}
  </update>
  <!-- 변수가 2개 이상인 경우 -->
  <!-- VO의 단점은 그때그때 생성되는 것이 아니라 만들어져 있음 따라서 구조가 바뀌면 계속 수정해줘야 함 -->
  <!-- 그때그때 바뀌는 값이면 VO 대신에 map을 사용한다 -->
  
  
  
  
  
  
  
  
  
  
</mapper>